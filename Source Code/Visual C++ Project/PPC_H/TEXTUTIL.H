/*
	File:		TextUtils.h

	Copyright:	© 1984-1993 by Apple Computer, Inc., all rights reserved.

	WARNING
	This file was auto generated by the interfacer tool. Modifications
	must be made to the master file.

	mod 6 28 95 tsh - remove CompareString due to conflicts with WIN32
*/

#ifndef __TEXTUTILS__
#define __TEXTUTILS__

#ifndef __TYPES__
#include <MacTypes.H>
#endif

#ifndef __SCRIPT__
#include <Script.H>
#endif

/* New constants for System 7.0: */

enum  {
/* Constants for truncWhere argument in TruncString and TruncText */
	truncEnd			= 0,			/* Truncate at end */
	truncMiddle			= 0x4000,			/* Truncate in middle */
	smTruncEnd			= 0,			/* Truncate at end - obsolete */
	smTruncMiddle			= 0x4000,			/* Truncate in middle - obsolete */
/* Constants for TruncString and TruncText results */
	notTruncated			= 0,			/* No truncation was necessary */
	truncated			= 1,			/* Truncation performed */
	truncErr			= -1,			/* General error */
	smNotTruncated			= 0,			/* No truncation was necessary - obsolete */
	smTruncated			= 1,			/* Truncation performed	- obsolete */
	smTruncErr			= -1			/* General error - obsolete */
};

enum  {
	fVNumber			= 0,			/* first version of NumFormatString */
/* Special language code values for Language Order */
	systemCurLang			= -2,			/* current (itlbLang) lang for system script */
	systemDefLang			= -3,			/* default (table) lang for system script */
	currentCurLang			= -4,			/* current (itlbLang) lang for current script */
	currentDefLang			= -5,			/* default lang for current script */
	scriptCurLang			= -6,			/* current (itlbLang) lang for specified script */
	scriptDefLang			= -7			/* default language for a specified script */
};

enum  {
	iuSystemCurLang			= -2,			/* <obsolete> current (itlbLang) lang for system script */
	iuSystemDefLang			= -3,			/* <obsolete> default (table) lang for system script */
	iuCurrentCurLang			= -4,			/* <obsolete> current (itlbLang) lang for current script */
	iuCurrentDefLang			= -5,			/* <obsolete> default lang for current script */
	iuScriptCurLang			= -6			/* <obsolete> current (itlbLang) lang for specified script */
};

enum  {
/* <obsolete> default language for a specified script */
	iuScriptDefLang			= -7
};

enum  {
	smBreakWord,
	smBreakChar,
	smBreakOverflow
};

typedef unsigned char StyledLineBreakCode;

enum  {
	fPositive,
	fNegative,
	fZero
};

typedef unsigned char FormatClass;

enum  {
	fFormatOK,
	fBestGuess,
	fOutOfSynch,
	fSpuriousChars,
	fMissingDelimiter,
	fExtraDecimal,
	fMissingLiteral,
	fExtraExp,
	fFormatOverflow,
	fFormStrIsNAN,
	fBadPartsTable,
	fExtraPercent,
	fExtraSeparator,
	fEmptyFormatString
};

typedef unsigned char FormatResultType;

struct NumFormatString {
	char			fLength;
	char			fVersion;
	char			data[254];			/* private data */
};
typedef struct NumFormatString NumFormatString;

typedef struct NumFormatString NumFormatStringRec;

struct FVector {
	short			start;
	short			length;
};
typedef struct FVector FVector;


/* index by [fPositive..fZero] */

typedef FVector TripleInt[3];

struct ScriptRunStatus {
	char			script;
	char			variant;
};
typedef struct ScriptRunStatus ScriptRunStatus;


/* New types for System 7.0: */


/* Type for truncWhere parameter in new TruncString, TruncText */

typedef short TruncCode;

enum  {
	shortDate,
	longDate,
	abbrevDate
};

typedef unsigned char DateForm;

enum  {
/* String2Date status values */
#define fatalDateTime	0x8000			/* String2Date and String2Time mask to a fatal error */
	longDateFound			= 1,			/* String2Date mask to long date found */
	leftOverChars			= 2,			/* String2Date & Time mask to warn of left over characters */
	sepNotIntlSep			= 4,			/* String2Date & Time mask to warn of non-standard separators */
	fieldOrderNotIntl			= 8,			/* String2Date & Time mask to warn of non-standard field order */
	extraneousStrings			= 16,			/* String2Date & Time mask to warn of unparsable strings in text */
	tooManySeps			= 32,			/* String2Date & Time mask to warn of too many separators */
	sepNotConsistent			= 64,			/* String2Date & Time mask to warn of inconsistent separators */
#define tokenErr	0x8100			/* String2Date & Time mask for 'tokenizer err encountered' */
#define cantReadUtilities	0x8200
#define dateTimeNotFound	0x8400
	dateTimeInvalid			= 0x8800
};

typedef short StringToDateStatus;

typedef short String2DateStatus;

struct DateCacheRecord {
	short			hidden[256];			/* only for temporary use */
};
typedef struct DateCacheRecord DateCacheRecord;

typedef DateCacheRecord *DateCachePtr;

struct BreakTable {
	char			charTypes[256];
	short			tripleLength;
	short			triples[1];
};
typedef struct BreakTable BreakTable;

typedef BreakTable *BreakTablePtr;


/* New NBreakTable for System 7.0: */

struct NBreakTable {
	signed char			flags1;
	signed char			flags2;
	short			version;
	short			classTableOff;
	short			auxCTableOff;
	short			backwdTableOff;
	short			forwdTableOff;
	short			doBackup;
	short			length;			/* length of NBreakTable */
	char			charTypes[256];
	short			tables[1];
};
typedef struct NBreakTable NBreakTable;

typedef NBreakTable *NBreakTablePtr;

#ifdef __cplusplus
extern "C" {
#endif

extern void pascal IUDateString(long dateTime, DateForm longFlag, Str255 result);
extern void iudatestring(long dateTime, DateForm longFlag, char *result);
extern void pascal IUDatePString(long dateTime, DateForm longFlag, Str255 result, Handle intlHandle);
extern void iudatepstring(long dateTime, DateForm longFlag, char *result, Handle intlHandle);
extern void pascal IUTimeString(long dateTime, Boolean wantSeconds, Str255 result);
extern void iutimestring(long dateTime, Boolean wantSeconds, char *result);
extern void pascal IUTimePString(long dateTime, Boolean wantSeconds, Str255 result, Handle intlHandle);
extern void iutimepstring(long dateTime, Boolean wantSeconds, char *result, Handle intlHandle);
extern void pascal IULDateString(LongDateTime *dateTime, DateForm longFlag, Str255 result, Handle intlHandle);
extern void iuldatestring(LongDateTime *dateTime, DateForm longFlag, char *result, Handle intlHandle);
extern void pascal IULTimeString(LongDateTime *dateTime, Boolean wantSeconds, Str255 result, Handle intlHandle);
extern void iultimestring(LongDateTime *dateTime, Boolean wantSeconds, char *result, Handle intlHandle);
extern OSErr pascal InitDateCache(DateCachePtr theCache);
extern StringToDateStatus pascal StringToDate(Ptr textPtr, long textLen, DateCachePtr theCache, long *lengthUsed, LongDateRec *dateTime);
extern StringToDateStatus pascal StringToTime(Ptr textPtr, long textLen, DateCachePtr theCache, long *lengthUsed, LongDateRec *dateTime);
extern Boolean pascal EqualString(ConstStr255Param str1, ConstStr255Param str2, Boolean caseSens, Boolean diacSens);
extern Boolean equalstring(char *str1, char *str2, Boolean caseSens, Boolean diacSens);
extern void pascal UpperString(Str255 theString, Boolean diacSens);
extern void upperstring(char *theString, Boolean diacSens);
extern short pascal RelString(ConstStr255Param str1, ConstStr255Param str2, Boolean caseSens, Boolean diacSens);
extern short relstring(char *str1, char *str2, Boolean caseSens, Boolean diacSens);
extern StringHandle pascal GetString(short stringID);
extern long pascal Munger(Handle h, long offset, const void *ptr1, long len1, const void *ptr2, long len2);
extern void pascal SetString(StringHandle theString, ConstStr255Param strNew);
extern void setstring(StringHandle theString, char *strNew);
extern StringHandle pascal NewString(ConstStr255Param theString);
extern StringHandle newstring(char *theString);
extern void pascal GetIndString(Str255 theString, short strListID, short index);
extern void getindstring(char *theString, short strListID, short index);

/* following four will be obsolete. Use equivalent PString call and pass a NIL handle */

extern short pascal IUMagString(const void *aPtr, const void *bPtr, short aLen, short bLen);
extern short pascal IUMagIDString(const void *aPtr, const void *bPtr, short aLen, short bLen);
extern short pascal IUCompString(ConstStr255Param aStr, ConstStr255Param bStr);
extern short iucompstring(char *aStr, char *bStr);
extern short pascal IUEqualString(ConstStr255Param aStr, ConstStr255Param bStr);
extern short iuequalstring(char *aStr, char *bStr);
extern void pascal StringToNum(ConstStr255Param theString, long *theNum);
extern void stringtonum(char *theString, long *theNum);
extern void pascal NumToString(long theNum, Str255 theString);
extern void numtostring(long theNum, char *theString);
extern short pascal IUMagPString(const void *aPtr, const void *bPtr, short aLen, short bLen, Handle itl2Handle);
extern short pascal IUMagIDPString(const void *aPtr, const void *bPtr, short aLen, short bLen, Handle itl2Handle);
extern short pascal IUCompPString(ConstStr255Param aStr, ConstStr255Param bStr, Handle itl2Handle);
extern short iucomppstring(char *aStr, char *bStr, Handle intlHandle);
extern short pascal IUEqualPString(ConstStr255Param aStr, ConstStr255Param bStr, Handle itl2Handle);
extern short iuequalpstring(char *aStr, char *bStr, Handle intlHandle);
extern short pascal ScriptOrder(ScriptCode script1, ScriptCode script2);
extern short pascal IUScriptOrder(ScriptCode script1, ScriptCode script2);
extern short pascal IULangOrder(LangCode language1, LangCode language2);
extern short pascal IUTextOrder(const void *aPtr, const void *bPtr, short aLen, short bLen, ScriptCode aScript, ScriptCode bScript, LangCode aLang, LangCode bLang);
extern short pascal IUStringOrder(ConstStr255Param aStr, ConstStr255Param bStr, ScriptCode aScript, ScriptCode bScript, LangCode aLang, LangCode bLang);
extern short iustringorder(char *aStr, char *bStr, ScriptCode aScript, ScriptCode bScript, LangCode aLang, LangCode bLang);
extern void pascal FindWord(Ptr textPtr, short textLength, short offset, Boolean leadingEdge, BreakTablePtr breaks, OffsetTable offsets);
extern void pascal FindWordBreaks(Ptr textPtr, short textLength, short offset, Boolean leadingEdge, BreakTablePtr breaks, OffsetTable offsets, ScriptCode script);
extern void pascal UprText(Ptr textPtr, short len);
extern void pascal LwrText(Ptr textPtr, short len);

/*  New for 7.0  */

extern void pascal LowerText(Ptr textPtr, short len);
extern void pascal StripText(Ptr textPtr, short len);
extern void pascal UpperText(Ptr textPtr, short len);
extern void pascal StripUpperText(Ptr textPtr, short len);
extern StyledLineBreakCode pascal StyledLineBreak(Ptr textPtr, long textLen, long textStart, long textEnd, long flags, Fixed *textWidth, long *textOffset);
extern FormatStatus pascal StringToFormatRec(ConstStr255Param inString, const NumberParts *partsTable, NumFormatString *outString);
extern FormatStatus pascal FormatRecToString(const NumFormatString *myCanonical, const NumberParts *partsTable, Str255 outString, TripleInt positions);
extern FormatStatus pascal ExtendedToString(extended80 *x, const NumFormatString *myCanonical, const NumberParts *partsTable, Str255 outString);
extern FormatStatus pascal StringToExtended(ConstStr255Param source, const NumFormatString *myCanonical, const NumberParts *partsTable, extended80 *x);
extern ScriptRunStatus pascal FindScriptRun(Ptr textPtr, long textLen, long *lenUsed);
extern void pascal NFindWord(Ptr textPtr, short textLength, short offset, Boolean leadingEdge, NBreakTablePtr nbreaks, OffsetTable offsets);
extern short pascal TruncString(short width, Str255 theString, TruncCode truncWhere);
extern short pascal TruncText(short width, Ptr textPtr, short *length, TruncCode truncWhere);
extern short pascal ReplaceTex(Handle baseText, Handle substitutionText, Str15 key);
extern void pascal LowercaseText(Ptr textPtr, short len, ScriptCode script);
extern void pascal StripDiacritics(Ptr textPtr, short len, ScriptCode script);
extern void pascal UppercaseText(Ptr textPtr, short len, ScriptCode script);
extern void pascal UppercaseStripDiacritics(Ptr textPtr, short len, ScriptCode script);
#if OLDROUTINENAMES
#define LongDateString(dateTime, longFlag, result, intlHandle)  \
	IULDateString(dateTime, longFlag, result, intlHandle)

#define longdatestring(dateTime, longFlag, result, intlHandle)  \
	iuldatestring(dateTime, longFlag, result, intlHandle)

#define LongTimeString(dateTime, wantSeconds, result, intlHandle)  \
	IULDateString(dateTime, wantSeconds, result, intlHandle)

#define longtimestring(dateTime, wantSeconds, result, intlHandle)  \
	iultimestring(dateTime, wantSeconds, result, intlHandle)

#define String2Date(textPtr, textLen, theCache, lengthUsed, dateTime)  \
	StringToDate(textPtr, textLen, theCache, lengthUsed, dateTime)

#define String2Time(textPtr, textLen, theCache, lengthUsed, dateTime)  \
	StringToTime(textPtr, textLen, theCache, lengthUsed, dateTime)

#define UprString(theString, diacSens) UpperString(theString, diacSens)

#define uprstring(theString, diacSens) upperstring(theString, diacSens)

#if MACVER
// lve remove warning (Comparestring is defined in WIN32)
#define CompareString(aStr, bStr, itl2Handle) IUCompPString(aStr, bStr, itl2Handle)
#endif

#define comparestring(aStr, bStr, intlHandle) iucomppstring(aStr, bStr, intlHandle)

#define CompareText(aPtr, bPtr, aLen, bLen, itl2Handle)  \
	IUMagPString(aPtr, bPtr, aLen, bLen, itl2Handle)

#define IdenticalText(aPtr, bPtr, aLen, bLen, itl2Handle)  \
	IUMagIDPString(aPtr, bPtr, aLen, bLen, itl2Handle)

#define IdenticalString(aStr, bStr, itl2Handle) IUEqualPString(aStr, bStr, itl2Handle)

#define identicalstring(aStr, bStr, intlHandle) iuequalpstring(aStr, bStr, intlHandle)

#define LanguageOrder(language1, language2) IULangOrder(language1, language2)

#define TextOrder(aPtr, bPtr, aLen, bLen, aScript, bScript, aLang, bLang)  \
	IUTextOrder(aPtr, bPtr, aLen, bLen, aScript, bScript, aLang, bLang)

#define StringOrder(aStr, bStr, aScript, bScript, aLang, bLang)  \
	IUStringOrder(aStr, bStr, aScript, bScript, aLang, bLang)

#define Str2Format(inString, partsTable, outString)  \
	StringToFormatRec(inString, partsTable, outString)

#define Format2Str(myCanonical, partsTable, outString, positions)  \
	FormatRecToString(myCanonical, partsTable, outString, positions)

#define FormatX2Str(x, myCanonical, partsTable, outString)  \
	ExtendedToString(x, myCanonical, partsTable, outString)

#define FormatStr2X(source, myCanonical, partsTable, x)  \
	StringToExtended(source, myCanonical, partsTable, x)

#define DateString(dateTime, longFlag, result, intlHandle)  \
	IUDatePString(dateTime, longFlag, result, intlHandle)

#define datestring(dateTime, longFlag, result, intlHandle)  \
	iudatepstring(dateTime, longFlag, result, intlHandle)

#define TimeString(dateTime, wantSeconds, result, intlHandle)  \
	IUTimePString(dateTime, wantSeconds, result, intlHandle)

#define timestring(dateTime, wantSeconds, result, intlHandle)  \
	iutimepstring(dateTime, wantSeconds, result, intlHandle)

#endif

#ifdef __cplusplus
}
#endif

#endif


