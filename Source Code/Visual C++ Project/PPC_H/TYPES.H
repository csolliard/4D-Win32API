/*
	File:		Types.h

	Copyright:	› 1984-1993 by Apple Computer, Inc., all rights reserved.

	WARNING
	This file was auto generated by the interfacer tool. Modifications
	must be made to the master file.

*/

#ifndef __TYPES__
#define __TYPES__

#ifndef __CONDITIONALMACROS__
#if MACVER
#include <ConditionalMacros.h>
#else
#include <Conditio.h>
#endif
#endif

#define PPC_HEADERS	1

#ifndef NULL
#define NULL 0
#endif

#define nil 0

#define noErr 0

typedef unsigned char Byte;

typedef char SignedByte;

typedef char *Ptr;

typedef Ptr *Handle;

typedef long Fixed;

typedef Fixed *FixedPtr;

typedef long Fract;

typedef Fract *FractPtr;

#if MACVER
// BBFix definitions of mathematical types from Hommel

#define extended80	__extended80
#define extended96	__extended96

typedef long double extended;

#if __MC68881__
	typedef struct { short w[5]; } __extended80;
	typedef extended __extended96;
#else
	typedef extended __extended80;
	typedef struct { short w[6]; } __extended96;
#endif

typedef struct comp { long hi,lo; } comp;

// BBFix end of definitions of mathematical types from Hommel
#endif

#if WINVER
typedef struct { long man[2]; short exp; } extended80;
typedef struct { long man[2]; short zero, exp; } extended96;

					/* set to 1 to enable Extended	*/
					/*   as a LONG DOUBLE, both app	*/
					/*   and ASIPORT must be rebuilt*/
#define EXT_LONGDOUBLE 1

#if EXT_LONGDOUBLE
typedef long double	extended;
typedef long double	DOUBLE;
#define	CEIL	ceill
#define	FLOOR	floorl
#define	FMOD	fmodl
#define	FABS	fabsl
extern F_ASIBND( extended )	ASI_Cos( extended );
extern F_ASIBND( extended )	ASI_Sin( extended );
extern F_ASIBND( extended )	ASI_Tan( extended );
extern F_ASIBND( extended )	ASI_Exp( extended );
#define	COS	ASI_Cos
#define	SIN	ASI_Sin
#define	TAN	ASI_Tan
#define	ACOS	acosl
#define	ASIN	asinl
#define	ATAN	atanl
#define	ATAN2	atan2l
#define	EXP	ASI_Exp
#define	LOG	logl
#define	LOG10	log10l
#define	SQRT	sqrtl
#else
typedef double	extended;
typedef double	DOUBLE;
#define	CEIL	ceil
#define	FLOOR	floor
#define	FMOD	fmod
#define	FABS	fabs
#define	COS	cos
#define	SIN	sin
#define	TAN	tan
#define	ACOS	acos
#define	ASIN	asin
#define	ATAN	atan
#define	ATAN2	atan2
#define	EXP	exp
#define	LOG	log
#define	LOG10	log10
#define	SQRT	sqrt
#endif
#define	rint( x )	(FLOOR( x + 0.5 ))
#endif

// BBFix added || __CASM__ 
#if defined(applec) || defined(__CASM__)
//#ifdef applec
typedef long double float_t;

typedef long double double_t;

#elif powerc || WINVER
typedef float float_t;

typedef double double_t;

#endif

#if powerc
#pragma options align=mac68k
#endif
struct wide {
	long			hi;
	unsigned long		lo;
};
#if powerc
#pragma options align=reset
#endif

typedef struct wide wide;

#if MACVER
enum {
	false = 0,
	true,
	FALSE = 0,
	TRUE
};
#endif

#if WINVER
enum {false,true};
#endif

typedef unsigned char Boolean;

enum {
	v,
	h
};

typedef unsigned char VHSelect;

typedef long (*ProcPtr);

typedef ProcPtr *ProcHandle;

#if !USESROUTINEDESCRIPTORS
#if WINVER
typedef void (*UniversalProcPtr)( void );
typedef void (**UniversalProcHandle)( void );
#else
typedef ProcPtr UniversalProcPtr, *UniversalProcHandle;
#endif
#endif

typedef unsigned char Str255[256], Str63[64], Str32[33], Str31[32], Str27[28], Str15[16], *StringPtr, **StringHandle;

#ifdef __cplusplus
#else
#define Length(string) (*(unsigned char *)(string))

#endif

typedef const unsigned char *ConstStr255Param;

typedef ConstStr255Param ConstStr63Param, ConstStr32Param, ConstStr31Param, ConstStr27Param, ConstStr15Param;

#if WINVER
#ifdef WIN32
typedef long (__stdcall *PasLProcPtr)();
typedef short  (__stdcall *PasWProcPtr)();
typedef char (__stdcall *PasBProcPtr)();
#else
typedef long (_far _pascal *PasLProcPtr)(); 
typedef short  (_far _pascal *PasWProcPtr)(); 
typedef char (_far _pascal *PasBProcPtr)(); 
#endif
#endif

typedef short OSErr;

typedef unsigned long OSType;

typedef OSType *OSTypePtr;

typedef unsigned long ResType;

typedef ResType *ResTypePtr;

typedef unsigned char Style;

typedef short ScriptCode;

typedef short LangCode;

#if powerc
#pragma options align=mac68k
#endif
struct Point {
	short						v;
	short						h;
};
#if powerc
#pragma options align=reset
#endif

typedef struct Point Point;

typedef Point *PointPtr;

#if powerc
#pragma options align=mac68k
#endif
struct Rect {
	short						top;
	short						left;
	short						bottom;
	short						right;
};
#if powerc
#pragma options align=reset
#endif

typedef struct Rect Rect;

typedef Rect *RectPtr;

#define topLeft(r)	(((Point *) &(r))[0])
#define botRight(r)	(((Point *) &(r))[1])

enum {
	normal						= 0,
	bold						= 1,
	italic						= 2,
	underline					= 4,
	outline						= 8,
	shadow						= 0x10,
	condense					= 0x20,
	extend						= 0x40
};

#if powerc
#pragma options align=mac68k
#endif
struct NumVersion {
	unsigned char				majorRev;
	unsigned char				minorAndBugRev;
	unsigned char				stage;
	unsigned char				nonRelRev;
};
#if powerc
#pragma options align=reset
#endif

typedef struct NumVersion NumVersion;

#if powerc
#pragma options align=mac68k
#endif
struct VersRec {
	NumVersion					numericVersion;
	short						countryCode;
	Str255						shortVersion;
	Str255						reserved;
};
#if powerc
#pragma options align=reset
#endif

typedef struct VersRec VersRec;

typedef VersRec *VersRecPtr, **VersRecHndl;

#ifndef __MIXEDMODE__
#if MACVER
#include <MixedMode.h>
#else
#include <MixedMod.h>
#endif
/*	#include <Traps.h>											*/
#endif

#ifdef __cplusplus
extern "C" {
#endif

extern void pascal Debugger(void) 
 ONEWORDINLINE(0xA9FF);
extern void pascal DebugStr(ConstStr255Param aStr)
 ONEWORDINLINE(0xABFF);
extern void pascal Debugger68k(void) 
 ONEWORDINLINE(0xA9FF);
extern void pascal DebugStr68k(ConstStr255Param aStr)
 ONEWORDINLINE(0xABFF);
extern void debugstr(char *aStr);
extern void pascal SysBreak(void)
 THREEWORDINLINE(0x303C, 0xFE16, 0xA9C9);
extern void pascal SysBreakStr(ConstStr255Param debugStr)
 THREEWORDINLINE(0x303C, 0xFE15, 0xA9C9);
extern void pascal SysBreakFunc(ConstStr255Param debugFunc)
 THREEWORDINLINE(0x303C, 0xFE14, 0xA9C9);
#ifdef __cplusplus
}
#endif

#endif



