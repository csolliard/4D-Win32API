/*
	File:		Icons.h

	Copyright:	© 1984-1993 by Apple Computer, Inc., all rights reserved.

	WARNING
	This file was auto generated by the interfacer tool. Modifications
	must be made to the master file.

*/

#ifndef __ICONS__
#define __ICONS__

#ifndef __TYPES__
#include <MacTypes.H>
#endif

#ifndef __QUICKDRAW__
#if LONG_FILENAMES
#include <Quickdraw.H>
#else
#include <Quickdra.H>
#endif
#endif

enum  {
/* The following are icons for which there are both icon suites and SICNs. */
	genericDocumentIconResource	= -4000,
	genericStationeryIconResource = -3985,
	genericEditionFileIconResource = -3989,
	genericApplicationIconResource = -3996,
	genericDeskAccessoryIconResource = -3991,
	genericFolderIconResource	= -3999,
	privateFolderIconResource	= -3994,
	floppyIconResource			= -3998,
	trashIconResource			= -3993,
/* The following are icons for which there are SICNs only. */
	desktopIconResource			= -3992,
	openFolderIconResource		= -3997,
	genericHardDiskIconResource	= -3995,
	genericFileServerIconResource = -3972,
	genericSuitcaseIconResource	= -3970,
	genericMoverObjectIconResource = -3969,
/* The following are icons for which there are icon suites only. */
	genericPreferencesIconResource = -3971,
	genericQueryDocumentIconResource = -16506,
	genericExtensionIconResource = -16415,
	systemFolderIconResource	= -3983,
	appleMenuFolderIconResource	= -3982
};

#define large1BitMask OST_ICNList

#define large4BitData OST_icl4

#define large8BitData OST_icl8

#define small1BitMask OST_icsList

#define small4BitData OST_ics4

#define small8BitData OST_ics8

#define mini1BitMask OST_icmList

#define mini4BitData OST_icm4

#define mini8BitData OST_icm8

enum  {
	startupFolderIconResource	= -3981,
	ownedFolderIconResource		= -3980,
	dropFolderIconResource		= -3979,
	sharedFolderIconResource	= -3978,
	mountedFolderIconResource	= -3977,
	controlPanelFolderIconResource = -3976,
	printMonitorFolderIconResource = -3975,
	preferencesFolderIconResource = -3974,
	extensionsFolderIconResource = -3973,
	fontsFolderIconResource		= -3968,
	fullTrashIconResource		= -3984
};


/*  alignment type values  */

enum  {
	atNone			= 0x0,
	atVerticalCenter			= 0x1,
	atTop			= 0x2,
	atBottom			= 0x3,
	atHorizontalCenter			= 0x4,
	atAbsoluteCenter			= (atVerticalCenter|atHorizontalCenter),
	atCenterTop			= (atTop|atHorizontalCenter),
	atCenterBottom			= (atBottom|atHorizontalCenter),
	atLeft			= 0x8,
	atCenterLeft			= (atVerticalCenter|atLeft),
	atTopLeft			= (atTop|atLeft),
	atBottomLeft			= (atBottom|atLeft),
	atRight			= 0xC,
	atCenterRight			= (atVerticalCenter|atRight),
	atTopRight			= (atTop|atRight),
	atBottomRight			= (atBottom|atRight)
};

typedef short IconAlignmentType;


/*  transform type values  */

enum  {
	ttNone			= 0x0,
	ttDisabled			= 0x1,
	ttOffline			= 0x2,
	ttOpen			= 0x3,
	ttLabel1			= 0x0100,
	ttLabel2			= 0x0200,
	ttLabel3			= 0x0300,
	ttLabel4			= 0x0400,
	ttLabel5			= 0x0500,
	ttLabel6			= 0x0600,
	ttLabel7			= 0x0700,
	ttSelected			= 0x4000,
	ttSelectedDisabled			= (ttSelected|ttDisabled),
	ttSelectedOffline			= (ttSelected|ttOffline),
	ttSelectedOpen			= (ttSelected|ttOpen)
};

typedef short IconTransformType;


/*  Selector mask values  */

enum  {
	svLarge1Bit			= 0x0001,
	svLarge4Bit			= 0x0002,
	svLarge8Bit			= 0x0004,
	svSmall1Bit			= 0x0100,
	svSmall4Bit			= 0x0200,
	svSmall8Bit			= 0x0400,
#define svMini1Bit	0x00010000
#define svMini4Bit	0x00020000
#define svMini8Bit	0x00040000
	svAllLargeData			= 0x00ff,
#define svAllSmallData	0xff00
#define svAllMiniData	0x00ff0000
	svAll1BitData			= (svLarge1Bit|svSmall1Bit|svMini1Bit),
	svAll4BitData			= (svLarge4Bit|svSmall4Bit|svMini4Bit),
	svAll8BitData			= (svLarge8Bit|svSmall8Bit|svMini8Bit),
	svAllAvailableData			= (long)0xffffffff
};

typedef unsigned long IconSelectorValue;

typedef OSErr (pascal *IconActionProcPtr)(ResType theType, Handle *theIcon, void *yourDataPtr);

enum {
	uppIconActionProcInfo = kPascalStackBased
		| RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))
		| STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(ResType)))
		| STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(Handle*)))
		| STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(void*)))
};

#if USESROUTINEDESCRIPTORS
typedef UniversalProcPtr IconActionUPP;

#define CallIconActionProc(userRoutine, theType, theIcon, yourDataPtr)		\
		CallUniversalProc((UniversalProcPtr)(userRoutine), uppIconActionProcInfo, (theType), (theIcon), (yourDataPtr))
#define NewIconActionProc(userRoutine)		\
		(IconActionUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppIconActionProcInfo, GetCurrentISA())
#else
typedef IconActionProcPtr IconActionUPP;

#define CallIconActionProc(userRoutine, theType, theIcon, yourDataPtr)		\
		(*(userRoutine))((theType), (theIcon), (yourDataPtr))
#define NewIconActionProc(userRoutine)		\
		(IconActionUPP)(userRoutine)
#endif

typedef IconActionProcPtr IconAction;

typedef Handle (pascal *IconGetterProcPtr)(ResType theType, void *yourDataPtr);

enum {
	uppIconGetterProcInfo = kPascalStackBased
		| RESULT_SIZE(SIZE_CODE(sizeof(Handle)))
		| STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(ResType)))
		| STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(void*)))
};

#if USESROUTINEDESCRIPTORS
typedef UniversalProcPtr IconGetterUPP;

#define CallIconGetterProc(userRoutine, theType, yourDataPtr)		\
		CallUniversalProc((UniversalProcPtr)(userRoutine), uppIconGetterProcInfo, (theType), (yourDataPtr))
#define NewIconGetterProc(userRoutine)		\
		(IconGetterUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppIconGetterProcInfo, GetCurrentISA())
#else
typedef IconGetterProcPtr IconGetterUPP;

#define CallIconGetterProc(userRoutine, theType, yourDataPtr)		\
		(*(userRoutine))((theType), (yourDataPtr))
#define NewIconGetterProc(userRoutine)		\
		(IconGetterUPP)(userRoutine)
#endif

typedef IconGetterProcPtr IconGetter;

#ifdef __cplusplus
extern "C" {
#endif

extern OSErr pascal PlotIconID(const Rect *theRect, IconAlignmentType align, IconTransformType transform, short theResID);
extern OSErr pascal NewIconSuite(Handle *theIconSuite);
extern OSErr pascal AddIconToSuite(Handle theIconData, Handle theSuite, ResType theType);
extern OSErr pascal GetIconFromSuite(Handle *theIconData, Handle theSuite, ResType theType);
extern OSErr pascal ForEachIconDo(Handle theSuite, IconSelectorValue selector, IconActionUPP action, void *yourDataPtr);
extern OSErr pascal GetIconSuite(Handle *theIconSuite, short theResID, IconSelectorValue selector);
extern OSErr pascal DisposeIconSuite(Handle theIconSuite, Boolean disposeData);
extern OSErr pascal PlotIconSuite(const Rect *theRect, IconAlignmentType align, IconTransformType transform, Handle theIconSuite);
extern OSErr pascal MakeIconCache(Handle *theHandle, IconGetterUPP makeIcon, void *yourDataPtr);
extern OSErr pascal LoadIconCache(const Rect *theRect, IconAlignmentType align, IconTransformType transform, Handle theIconCache);
extern OSErr pascal PlotIconMethod(const Rect *theRect, IconAlignmentType align, IconTransformType transform, IconGetterUPP theMethod, void *yourDataPtr);
extern OSErr pascal GetLabel(short labelNumber, RGBColor *labelColor, Str255 labelString);
extern Boolean pascal PtInIconID(Point testPt, const Rect *iconRect, IconAlignmentType align, short iconID);
extern Boolean pascal PtInIconSuite(Point testPt, const Rect *iconRect, IconAlignmentType align, Handle theIconSuite);
extern Boolean pascal PtInIconMethod(Point testPt, const Rect *iconRect, IconAlignmentType align, IconGetterUPP theMethod, void *yourDataPtr);
extern Boolean pascal RectInIconID(const Rect *testRect, const Rect *iconRect, IconAlignmentType align, short iconID);
extern Boolean pascal RectInIconSuite(const Rect *testRect, const Rect *iconRect, IconAlignmentType align, Handle theIconSuite);
extern Boolean pascal RectInIconMethod(const Rect *testRect, const Rect *iconRect, IconAlignmentType align, IconGetterUPP theMethod, void *yourDataPtr);
extern OSErr pascal IconIDToRgn(RgnHandle theRgn, const Rect *iconRect, IconAlignmentType align, short iconID);
extern OSErr pascal IconSuiteToRgn(RgnHandle theRgn, const Rect *iconRect, IconAlignmentType align, Handle theIconSuite);
extern OSErr pascal IconMethodToRgn(RgnHandle theRgn, const Rect *iconRect, IconAlignmentType align, IconGetterUPP theMethod, void *yourDataPtr);
extern OSErr pascal SetSuiteLabel(Handle theSuite, short theLabel);
extern short pascal GetSuiteLabel(Handle theSuite);
extern OSErr pascal GetIconCacheData(Handle theCache, void **theData);
extern OSErr pascal SetIconCacheData(Handle theCache, void *theData);
extern OSErr pascal GetIconCacheProc(Handle theCache, IconGetterUPP *theProc);
extern OSErr pascal SetIconCacheProc(Handle theCache, IconGetterUPP theProc);
extern OSErr pascal PlotIconHandle(const Rect *theRect, IconAlignmentType align, IconTransformType transform, Handle theIcon);
extern OSErr pascal PlotSICNHandle(const Rect *theRect, IconAlignmentType align, IconTransformType transform, Handle theSICN);
extern OSErr pascal PlotCIconHandle(const Rect *theRect, IconAlignmentType align, IconTransformType transform, CIconHandle theCIcon);
#ifdef __cplusplus
}
#endif

#endif


